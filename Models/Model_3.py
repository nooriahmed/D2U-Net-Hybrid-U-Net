# -*- coding: utf-8 -*-
"""Model_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CwvQ21AHX-OhoGksZVCjZqmOmqW42k3k
"""

def dual_path_unet_no_bottleneck(input_shape=(224, 224, 3), dropout_rate=0.5):
    inputs = Input(input_shape)

    # Path 1: Global Features (Contextual Information)
    # Encoder 1
    conv1_1 = SeparableConv2D(64, (3, 3), padding='same')(inputs)
    conv1_1 = BatchNormalization()(conv1_1)
    conv1_1 = PReLU()(conv1_1)
    conv1_1 = SeparableConv2D(64, (3, 3), padding='same')(conv1_1)
    conv1_1 = BatchNormalization()(conv1_1)
    conv1_1 = PReLU()(conv1_1)
    pool1_1 = MaxPooling2D(pool_size=(2, 2))(conv1_1)

    conv2_1 = SeparableConv2D(128, (3, 3), padding='same')(pool1_1)
    conv2_1 = BatchNormalization()(conv2_1)
    conv2_1 = PReLU()(conv2_1)
    conv2_1 = SeparableConv2D(128, (3, 3), padding='same')(conv2_1)
    conv2_1 = BatchNormalization()(conv2_1)
    conv2_1 = PReLU()(conv2_1)
    pool2_1 = MaxPooling2D(pool_size=(2, 2))(conv2_1)

    # Path 2: Local Features (Edges)
    # Encoder 2
    conv1_2 = SeparableConv2D(64, (3, 3), padding='same')(inputs)
    conv1_2 = BatchNormalization()(conv1_2)
    conv1_2 = PReLU()(conv1_2)
    conv1_2 = SeparableConv2D(64, (3, 3), padding='same')(conv1_2)
    conv1_2 = BatchNormalization()(conv1_2)
    conv1_2 = PReLU()(conv1_2)
    pool1_2 = MaxPooling2D(pool_size=(2, 2))(conv1_2)

    conv2_2 = SeparableConv2D(128, (3, 3), padding='same')(pool1_2)
    conv2_2 = BatchNormalization()(conv2_2)
    conv2_2 = PReLU()(conv2_2)
    conv2_2 = SeparableConv2D(128, (3, 3), padding='same')(conv2_2)
    conv2_2 = BatchNormalization()(conv2_2)
    conv2_2 = PReLU()(conv2_2)
    pool2_2 = MaxPooling2D(pool_size=(2, 2))(conv2_2)

    # Decoder 1 (Global Features)
    up4_1 = UpSampling2D(size=(2, 2))(pool2_1)
    up4_1 = Concatenate()([up4_1, conv2_1])
    conv4_1 = SeparableConv2D(128, (3, 3), padding='same')(up4_1)
    conv4_1 = BatchNormalization()(conv4_1)
    conv4_1 = PReLU()(conv4_1)
    conv4_1 = SeparableConv2D(128, (3, 3), padding='same')(conv4_1)
    conv4_1 = BatchNormalization()(conv4_1)
    conv4_1 = PReLU()(conv4_1)

    up5_1 = UpSampling2D(size=(2, 2))(conv4_1)
    up5_1 = Concatenate()([up5_1, conv1_1])
    conv5_1 = SeparableConv2D(64, (3, 3), padding='same')(up5_1)
    conv5_1 = BatchNormalization()(conv5_1)
    conv5_1 = PReLU()(conv5_1)
    conv5_1 = SeparableConv2D(64, (3, 3), padding='same')(conv5_1)
    conv5_1 = BatchNormalization()(conv5_1)
    conv5_1 = PReLU()(conv5_1)

    # Decoder 2 (Local Features)
    up4_2 = UpSampling2D(size=(2, 2))(pool2_2)
    up4_2 = Concatenate()([up4_2, conv2_2])
    conv4_2 = SeparableConv2D(128, (3, 3), padding='same')(up4_2)
    conv4_2 = BatchNormalization()(conv4_2)
    conv4_2 = PReLU()(conv4_2)
    conv4_2 = SeparableConv2D(128, (3, 3), padding='same')(conv4_2)
    conv4_2 = BatchNormalization()(conv4_2)
    conv4_2 = PReLU()(conv4_2)

    up5_2 = UpSampling2D(size=(2, 2))(conv4_2)
    up5_2 = Concatenate()([up5_2, conv1_2])
    conv5_2 = SeparableConv2D(64, (3, 3), padding='same')(up5_2)
    conv5_2 = BatchNormalization()(conv5_2)
    conv5_2 = PReLU()(conv5_2)
    conv5_2 = SeparableConv2D(64, (3, 3), padding='same')(conv5_2)
    conv5_2 = BatchNormalization()(conv5_2)
    conv5_2 = PReLU()(conv5_2)

    # Merge Outputs from Both Decoders
    merged_output = Concatenate()([conv5_1, conv5_2])
    outputs = Conv2D(1, (1, 1), activation='sigmoid')(merged_output)

    model = Model(inputs, outputs)
    return model